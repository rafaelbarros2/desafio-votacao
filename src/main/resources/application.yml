spring:
  application:
    name: desafio-votacao

  profiles:
    active: dev

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.H2Dialect

  h2:
    console:
      enabled: true
      path: /h2-console

  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=5m

server:
  port: 8080

# Application specific properties
votacao:
  sessao:
    duracao-padrao: 60 # Duration in seconds (default 1 minute)
  cpf:
    validation:
      url: http://localhost:8080/api/v1/cpf/validate # Fake endpoint

# Actuator endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      show-details: always

# SpringDoc OpenAPI
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true

# Logging
logging:
  level:
    com.desafio.votacao: INFO
    org.springframework.web: INFO
    org.hibernate: INFO

---
# Development profile
spring:
  config:
    activate:
      on-profile: dev

  datasource:
    url: jdbc:h2:mem:votacao
    driver-class-name: org.h2.Driver
    username: sa
    password:

  jpa:
    hibernate:
      ddl-auto: create-drop

logging:
  level:
    com.desafio.votacao: DEBUG
    org.springframework.web: DEBUG

---
# Production profile
spring:
  config:
    activate:
      on-profile: prod

  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/votacao}
    driver-class-name: org.postgresql.Driver
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD:postgres}

  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

logging:
  level:
    com.desafio.votacao: INFO
    org.springframework.web: WARN
